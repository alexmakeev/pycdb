var svg;var svg2;var container;var graph_configuration_data;var graph_data;var selected_object;var selected_relation;var zoom = d3.behavior.zoom()    .scaleExtent([1, 20])    .on("zoom", zoomed)    .on("zoomend", setTextOpacity);var drag = d3.behavior.drag()    .origin(function(d) { return d; })    .on("dragstart", dragstarted)    .on("drag", dragged)    .on("dragend", dragended);var test = {}function zoomed() {    container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");}function setTextOpacity() {}function selectObject(cid,id){    deleteSelection();    selected_object = $.grep(graph_data[0], function(e){ return (e.id == id && e.cid==cid); })[0]    var frm = $("obj_node_info");    $.each(selected_object, function(key, value){        var $ctrl = $('[name='+key+']');        //alert($ctrl.attr("type"));        if($ctrl[0]!=undefined){            switch($ctrl[0].type)            {                case "number":                case "text":                case "list":                    $ctrl.val(value);                    break;                case "color":                    var color = value;                    if(color == "default"){                        $("#color_default").attr('checked',"true");                        color = $.grep(graph_configuration_data[0], function(e){ return (e.id == cid); })[0].color;                    }                    $ctrl[0].value=color;                    break;                case "radio" : case "checkbox":                    $ctrl.each(function(){                        if($(this).attr('value') == value) {  $(this).attr("checked",value); }                    });                    break;            }        }    });    loadObjectConfigData(cid,id);}function zoomTo(cid,id){    d = $.grep(graph_data[0], function(e){ return (e.id == id && e.cid==cid); })[0]    area = d.size+7;    zoomToArea(d.x, d.y,area);}function resetMouseVars(){    chosenCid = undefined;}function dragstarted(d) {  d3.event.sourceEvent.stopPropagation();  d3.select(this).classed("dragging", true);}function dragged(d) {  d3.select(this).attr("x", d.x = d3.event.x).attr("y", d.y = d3.event.y);  refreshGraph();}function dragended(d) {  d3.select(this).classed("dragging", false);  saveAllGraph();}$(document).ready(function($){    svg = d3.select("#palette")    svg2 = d3.select("#graph_map")        .append("g")        .call(zoom);    svg2.append("rect")        .attr("width", 550)        .attr("height", 400)        .style("fill", "none")        .style("pointer-events", "all");    container = svg2.append("g");    svg2.on("mouseup",function(){            var coords = d3.mouse(container.node());            if(chosenCid)                addNewNode(chosenCid,coords[0],coords[1]);})        .on("mousemove",function(){            if((dragline!=undefined)){                dragline.attr("points",function(d){                    return chosenSource.x+","+ chosenSource.y+" "+d3.mouse(this)[0]+","+d3.mouse(this)[1];                });            }        });    d3.select("body").on("mouseup",resetMouseVars)        .on("click",function(){            if((dragline!=undefined)){                chosenRel=undefined;                chosenSource=undefined;                dragline=undefined;                deleteSelection();            }        });    loadConfigurationData();    loadGraphData();    loadSearchWidget();    //setTimeout(function(){deleteTheNode(3,2)},1000);    /*var circle = svg.selectAll("circle")    .data([32, 57, 112]).enter()                 .append("circle");    circle.style("fill", "blue")    .attr("cy", 90)    .attr("cy", 39)    .attr("r", 30);*/})